{
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "extends": [
        ":dependencyDashboard",
        ":semanticCommitScopeDisabled",
        ":gitSignOff"
    ],
    "separateMajorMinor": false,
    "prHeader": "Update Request | Renovate Bot",
    "customManagers": [
        {
            "customType": "regex",
            "fileMatch": [
                "Pkgfile"
            ],
            "matchStrings": [
                "# renovate: datasource=(?<datasource>.*?)(?:\\s+extractVersion=(?<extractVersion>.+?))?(?:\\s+versioning=(?<versioning>.+?))?\\s+depName=(?<depName>.+?)?\\s(?:\\s+.*_version:\\s+(?<currentValue>.*))?(?:\\s.*_ref:\\s+(?<currentDigest>.*))?"
            ],
            "versioningTemplate": "{{#if versioning}}{{versioning}}{{else}}semver{{/if}}"
        }
    ],
    "packageRules": [
        {
            "enabled": false,
            "matchDatasources": [
                "docker"
            ],
            "matchFileNames": [
                "hack/test/libvirt/docker-compose.yaml"
            ]
        },
        {
            "enabled": false,
            "matchDataSources": [
                "npm"
            ],
            "matchFileNames": [
                "website/**"
            ]
        },
        {
            "matchUpdateTypes": [
                "major",
                "minor",
                "patch",
                "pin",
                "digest"
            ],
            "groupName": "releases"
        },
        {
            "matchPackageNames": [
                "siderolabs/talos"
            ],
            "versioning": "regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "systemd/systemd"
            ],
            "versioning": "regex:^(?<major>\\d+)\\.?(?<minor>\\d+)?\\.?(?<patch>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "nvidia/open-gpu-kernel-modules"
            ],
            "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "abseil/abseil-cpp",
                "intel/Intel-Linux-Processor-Microcode-Data-Files",
                "git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git"
            ],
            "versioning": "regex:^(?<major>\\d{4})(?<minor>\\d{2})(?<patch>\\d{2})\\.?(?<build>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "actions/checkout"
            ],
            "versioning": "regex:^v(?<major>\\d+)"
        },
        {
            "matchPackageNames": [
                "raspberrypi/firmware"
            ],
            "versioning": "regex:^\\d+\\.(?<major>\\d{4})(?<minor>\\d{2})(?<patch>\\d{2})$"
        },
        {
            "matchPackageNames": [
                "Perl/perl5"
            ],
            "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d[02468]+)\\.(?<patch>\\d+)$"
        },
        {
            "matchPackageNames": [
                "curl/curl",
                "libexpat/libexpat"
            ],
            "versioning": "regex:^(?<major>\\d+)_(?<minor>\\d+)_?(?<patch>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "potiuk/get-workflow-origin"
            ],
            "versioning": "regex:^v(?<major>\\d+)_(?<minor>\\d+)_?(?<patch>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "openssl/openssl"
            ],
            "versioning": "regex:^(?<major>\\d+)_(?<minor>\\d+)_?(?<patch>\\d+)?(?<build>.*)?$"
        },
        {
            "matchPackageNames": [
                "json-c/json-c"
            ],
            "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?\\.?(?<build>\\d+)?$"
        },
        {
            "matchPackageNames": [
                "https://sourceware.org/git/glibc.git"
            ],
            "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>[0-9]{1,3})?$"
        },
        {
            "matchPackageNames": [
                "tcltk/tcl"
            ],
            "versioning": "regex:^(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)?$"
        }
    ]
}
